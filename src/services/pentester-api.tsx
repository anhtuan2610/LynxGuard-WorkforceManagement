import { get, post } from "./axios-config";

type TBaseResponse<T> = {
  code: number;
  message: string;
  data: T;
};

type TAssignedTasksResponse = TBaseResponse<TAssignedTasksData[]>;

export type TAssignedTasksData = {
  taskId: number;
  assignedAt: string;
  dueDate: string;
  taskStatus: string;
  vulnerability: TAssignedTasksDataVul;
};

type TAssignedTasksDataVul = {
  id: number;
  description: string;
  severity: string;
  url: string;
  actionReason: string;
  vulnerabilityStatus: string;
  project: TAssignedTasksDataVulProject;
};

type TAssignedTasksDataVulProject = {
  id: number;
  name: string;
  statusId: number;
};

type TPentesterTaskHistoryResponse = TBaseResponse<TPentesterTaskHistoryData[]>;

type TPentesterTaskHistoryData = {
  taskId: number;
  assignedAt: string;
  dueDate: string;
  status: string;
  report: string;
  fixedAt: string;
  rejectReason: string;
  vulnerability: TPentesterTaskHistoryVulData;
};

type TPentesterTaskHistoryVulData = {
  vulnerabilityId: number;
  description: string;
  severity: string;
  url: string;
  project: {
    projectId: number;
    projectName: string;
  };
};

export async function getAssignedTasks() {
  return await get<TAssignedTasksResponse>({
    url: `/Pentester/GetAssignedTasks`,
  });
}

export async function getAcceptedAssignedTasks() {
  return await get<TAssignedTasksResponse>({
    url: `/Pentester/GetAcceptedAssignedTasks`,
  });
}

export async function acceptVulnerabilities({
  vulId,
  reason,
}: {
  vulId: number;
  reason: string;
}) {
  return await post({
    url: `/Pentester/AcceptVulnerabilities`,
    data: {
      acceptedVulnerabilityIds: [vulId],
      acceptedReason: reason,
    },
  });
}

export async function rejectVulnerabilities({
  vulId,
  reason,
}: {
  vulId: number;
  reason: string;
}) {
  return await post({
    url: `/Pentester/RejectVulnerabilities`,
    data: {
      rejectedVulnerabilities: [
        {
          vulnerabilityId: vulId,
          reason: reason,
        },
      ],
    },
  });
}

export async function updateTaskStatus({
  taskId,
  statusId,
  reason,
  actionReason,
  evidenceUrl,
  evidenceImage,
}: {
  taskId: number;
  statusId: number;
  reason: string;
  actionReason: string;
  evidenceUrl?: string;
  evidenceImage?: FileList | null;
}) {
  const formData = new FormData();
  formData.append("StatusId", statusId.toString());
  formData.append("Reason", reason);
  formData.append("ActionReason", actionReason);
  if (evidenceUrl) {
    formData.append("EvidenceUrl", evidenceUrl);
  }
  if (evidenceImage) {
    formData.append("evidenceImage", evidenceImage[0]);
  }
  return await post({
    url: `/Pentester/UpdateTaskStatus/${taskId}`,
    data: formData,
    config: {
      headers: {
        "Content-Type": "multipart/form-data", // Đặt header chính xác
      },
    },
  });
}

export async function getPentesterTaskHistory() {
  return await get<TPentesterTaskHistoryResponse>({
    url: "/Pentester/GetPentesterTaskHistory",
  });
}
